{"version":3,"sources":["redux/reducers/chatReducer.js","redux/types.js","redux/reducers/rootReducer.js","redux/store.js","App.js","redux/actions/chatActions.js","index.js"],"names":["initialState","messages","typist","joined","chatReducer","state","action","type","concat","payload","handle","success","rootReducer","combineReducers","logger","createLogger","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","socket","io","on","data","console","log","description","dispatch","isTyping","AppendMessage","notTyping","connect","props","useState","setHandle","textArea","setTextArea","error","setError","useEffect","emit","noMoreTyping","className","src","logo","id","length","map","item","index","key","message","htmlFor","placeholder","value","onChange","e","target","onClick","preventDefault","handleSubmit","ReactDOM","render","document","getElementById"],"mappings":"6PAGMA,EAAa,CACfC,SAAU,GACVC,OAAQ,KACRC,QAAQ,GA4BGC,EAzBK,WAAiC,IAAhCC,EAA+B,uDAAvBL,EAAcM,EAAS,uCAChD,OAAOA,EAAOC,MACV,ICXsB,sBDYlB,OAAO,2BACAF,GADP,IAEIJ,SAAUI,EAAMJ,SAASO,OAAO,CAACF,EAAOG,YAEhD,ICfiB,iBDgBb,OAAO,2BACAJ,GADP,IAEIH,OAAQI,EAAOG,QAAQC,SAE/B,IClBkB,kBDmBd,kCACOL,GADP,IAEIH,OAAQ,OAEhB,ICxBmB,mBDyBf,kCACOG,GADP,IAEIF,OAAOG,EAAOG,QAAQE,UAE9B,QAAS,OAAON,IE5BXO,EAAcC,YAAgB,CACvCT,YAAaA,ICCXU,EAASC,yBACFC,EAAQC,YACjBL,EAAaM,YACZC,YAAgBC,IAAON,GACvBO,OAAOC,8BAAgCD,OAAOC,iC,iCCH7CC,E,MAASC,KAEfD,EAAOE,GAAG,UAAU,SAAAC,GAClBC,QAAQC,IAAIF,EAAKG,gBAGnBN,EAAOE,GAAG,UAAU,SAAAC,GAClBV,EAAMc,SCIE,CACFvB,KJhBmB,mBIiBnBE,QAAS,CAACE,QDNUe,EAAKf,cAEjCY,EAAOE,GAAG,UAAU,SAAAC,GAClBV,EAAMc,SCPD,SAAkBJ,GACrB,MAAM,CACFnB,KJViB,iBIWjBE,QAAQ,eAAKiB,IDIJK,CAASL,OAE1BH,EAAOE,GAAG,QAAQ,SAAAC,GAChBV,EAAMc,SCjBD,SAAuBJ,GAC1B,MAAM,CACFnB,KJJsB,sBIKtBE,QAAQ,eAAKiB,IDcJM,CAAcN,OAE/BH,EAAOE,GAAG,aAAa,SAAAC,GACrBV,EAAMc,SCCD,SAAmBJ,GACtB,MAAM,CACFnB,KJtBkB,kBIuBlBE,QAAQ,eAAIiB,IDJHO,CAAUP,OA2F3B,IAUeQ,eAVS,SAAA7B,GAAQ,IAAD,EACKA,EAAMD,YACxC,MAAM,CACJH,SAH2B,EACvBA,SAGJC,OAJ2B,EACbA,OAIdC,OAL2B,EACLA,UASX+B,EAlGf,SAAaC,GAAQ,IAAD,EACUC,mBAAS,IADnB,mBACX1B,EADW,KACH2B,EADG,OAEcD,mBAAS,IAFvB,mBAEXE,EAFW,KAEDC,EAFC,OAGQH,mBAAS,MAHjB,mBAGXI,EAHW,KAGJC,EAHI,KAKlBC,qBAAU,WACRnB,EAAOoB,KAAK,SAAU,CAAEd,YAAa,2BACpC,IAEH,IAMMe,EAAe,WACnBrB,EAAOoB,KAAK,YAAa,CACvB,OAAUjC,KAgBd,OACE,yBAAKmC,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKC,IAAKX,EAAMY,KAAMF,UAAU,cAElC,yBAAKG,GAAG,QACN,yBAAKA,GAAG,UACLb,EAAMhC,OAAS,iDAA6B,2DAE/C,yBAAK6C,GAAG,UAAUH,UAAU,aAC1B,4BAAI,4BAAI,mDACPV,EAAMjC,OAAS,4BAAKiC,EAAMjC,OAAX,cAAoC,KACzB,IAA1BiC,EAAMlC,SAASgD,OAAe,4BAAI,4CAA4B,KAC9Dd,EAAMlC,SAASiD,KAAI,SAACC,EAAMC,GACzB,OACE,yBAAKC,IAAKD,EAAOP,UAAU,OACzB,8BAAM,gCAASM,EAAKzC,OAAd,MADR,OAEE,6BACGyC,EAAKG,cAMhB,yBAAKN,GAAG,QACN,8BACE,kCACE,2BAAOO,QAAQ,eAAf,UACA,2BAAOhD,KAAK,OAAOyC,GAAG,cAAcQ,YAAY,SAASC,MAAO/C,EAAQgD,SAAU,SAACC,GAAD,OAAOtB,EAAUsB,EAAEC,OAAOH,UAC5G,2BAAOF,QAAQ,gBAAf,WACA,2BAAOhD,KAAK,OAAOiD,YAAY,iBAAiBR,GAAG,eAAeS,MAAOnB,EAAUoB,SAAU,SAACC,GAC5FpB,EAAYoB,EAAEC,OAAOH,OACE,KAAnBE,EAAEC,OAAOH,MAvDzBlC,EAAOoB,KAAK,SAAU,CACpB,OAAUjC,IAyDEkC,OAGJ,2BAAOC,UAAU,iBAAiBtC,KAAK,SAASkD,MAAM,OAAOI,QAAS,SAAAF,GACpEA,EAAEG,iBAnDK,SAACpD,EAAQ4C,GACb,KAAX5C,GAA6B,KAAZ4C,GAIrBb,EAAS,IACTlB,EAAOoB,KAAK,OAAQ,CAClB,OAAUjC,EACV,QAAW4C,KANXb,EAAS,wCAkDCsB,CAAarD,EAAQ4B,GACrBC,EAAY,IACZK,SAILJ,EAAQ,oCACP,2BAAG,sCAAYA,KACD,WElG1BwB,IAASC,OACP,kBAAC,IAAD,CAAUjD,MAAOA,GACf,kBAAC,EAAD,OAEFkD,SAASC,eAAe,W","file":"static/js/main.c45f8158.chunk.js","sourcesContent":["\r\nimport {APPEND_MESSAGE, IS_TYPING, NOT_TYPING, JUST_JOINED, LEAVE_CHAT } from '../types';\r\n\r\nconst initialState={\r\n    messages: [],\r\n    typist: null,\r\n    joined: false,\r\n}\r\n\r\nconst chatReducer = (state = initialState, action)=>{\r\n    switch(action.type){\r\n        case APPEND_MESSAGE:\r\n            return {\r\n                ...state,\r\n                messages: state.messages.concat([action.payload]),\r\n            };\r\n        case IS_TYPING:\r\n            return {\r\n                ...state,\r\n                typist: action.payload.handle,\r\n            };\r\n        case NOT_TYPING:\r\n            return{\r\n                ...state,\r\n                typist: null,\r\n            };\r\n        case JUST_JOINED:\r\n            return{\r\n                ...state,\r\n                joined:action.payload.success,\r\n            }\r\n        default: return state;\r\n    }\r\n}\r\nexport default chatReducer;\r\n","export const APPEND_MESSAGE = 'CHAT/APPEND_MESSAGE';\r\nexport const IS_TYPING = 'CHAT/IS_TYPING';\r\nexport const JUST_JOINED = 'CHAT/JUST_JOINED';\r\nexport const NOT_TYPING = 'CHAT/NOT_TYPING';\r\nexport const LEAVE_CHAT = 'CHAT/LEAVE_CHAT';\r\n","import {combineReducers} from 'redux';\r\nimport chatReducer from './chatReducer'\r\n\r\nexport const rootReducer = combineReducers({\r\n    chatReducer: chatReducer,\r\n});","import {createStore, applyMiddleware, compose} from 'redux';\r\nimport {createLogger} from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\nimport {rootReducer} from './reducers/rootReducer';\r\n\r\nconst logger = createLogger();\r\nexport const store = createStore(\r\n    rootReducer, compose(\r\n     applyMiddleware(thunk, logger),\r\n     window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n     ));\r\n\r\n","import React, { useState, useEffect } from 'react';\nimport { useDispatch, useSelector, connect } from 'react-redux'\nimport { AppendMessage, justJoined, isTyping, notTyping } from './redux/actions/chatActions';\nimport io from 'socket.io-client';\nimport { store } from './redux/store';\n\nconst socket = io();\n\nsocket.on('online', data => {\n  console.log(data.description);\n})\n\nsocket.on('joined', data => {\n  store.dispatch(justJoined(data.success));\n});\nsocket.on('typing', data => {\n  store.dispatch(isTyping(data));\n});\nsocket.on('chat', data => {\n  store.dispatch(AppendMessage(data));\n});\nsocket.on('no_typing', data => {\n  store.dispatch(notTyping(data));\n})\n\nfunction App(props) {\n  const [handle, setHandle] = useState('');\n  const [textArea, setTextArea] = useState('');\n  const [error, setError] = useState(null);\n\n  useEffect(() => {\n    socket.emit('online', { description: 'user._id: 1234567890' })\n  }, []);\n\n  const handleTyping = () => {\n    socket.emit('typing', {\n      'handle': handle,\n    });\n  };\n\n  const noMoreTyping = () => {\n    socket.emit('no_typing', {\n      'handle': handle,\n    });\n  };\n\n  const handleSubmit = (handle, message) => {\n    if (handle === '' || message === '') {\n      setError('Handle or message should not be null');\n      return\n    }\n    setError('');\n    socket.emit('chat', {\n      'handle': handle,\n      'message': message,\n    })\n  }\n\n  return (\n    <div className='App'>\n      <header className='App-header'>\n        <img src={props.logo} className='App-logo' />\n      </header>\n      <div id='main'>\n        <div id='status'>\n          {props.joined ? <em>You are connected</em> : <em>You were denied connection</em>}\n        </div>\n        <div id='message' className='container'>\n          <h1><em><strong>Chat messages</strong></em></h1>\n          {props.typist ? <h2>{props.typist} is typing</h2> : null}\n          {props.messages.length === 0 ? <h3><em>No messages</em></h3> : null}\n          {props.messages.map((item, index) => {\n            return (\n              <div key={index} className='row'>\n                <span><strong>{item.handle}:</strong></span>&nbsp;\n                <div>\n                  {item.message}\n                </div>\n              </div>\n            )\n          })}\n        </div>\n        <div id='form'>\n          <form>\n            <fieldset>\n              <label htmlFor='handleField'>Handle</label>\n              <input type='text' id='handleField' placeholder='Handle' value={handle} onChange={(e) => setHandle(e.target.value)} />\n              <label htmlFor='messageField'>Message</label>\n              <input type='text' placeholder='type a message' id='messageField' value={textArea} onChange={(e) => {\n                setTextArea(e.target.value);\n                if (e.target.value !== '') {\n                  handleTyping();\n                } else {\n                  noMoreTyping();\n                }\n              }} />\n              <input className='button-primary' type='submit' value='send' onClick={e => {\n                e.preventDefault();\n                handleSubmit(handle, textArea);\n                setTextArea('');\n                noMoreTyping();\n              }} />\n            </fieldset>\n          </form>\n          {error ? <blockquote>\n            <p><em>Error: {error}</em></p>\n          </blockquote> : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state=>{\n  const{messages, typist, joined} = state.chatReducer;\n  return{\n    messages,\n    typist,\n    joined,\n  }\n}\n\n\nexport default connect(mapStateToProps)(App);\n","import {APPEND_MESSAGE, IS_TYPING, NOT_TYPING, JUST_JOINED, LEAVE_CHAT } from '../types';\r\n\r\nexport function AppendMessage(data){\r\n    return{\r\n        type: APPEND_MESSAGE,\r\n        payload: {...data},\r\n    }\r\n}\r\n\r\nexport function isTyping(data){\r\n    return{\r\n        type: IS_TYPING,\r\n        payload: {...data},\r\n    }\r\n}\r\n\r\nexport function justJoined(bool){\r\n    return{\r\n        type: JUST_JOINED,\r\n        payload: {success: bool},\r\n    }\r\n}\r\n\r\nexport function notTyping(data){\r\n    return{\r\n        type: NOT_TYPING,\r\n        payload:{...data},\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport {store} from './redux/store';\nimport './index.css';\nimport 'milligram/dist/milligram.min.css';\nimport App from './App';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}